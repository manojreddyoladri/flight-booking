name: CI/CD Pipeline (Jenkinsfile Style)

on:
  push:
    branches: [main, jenkins-integration]
  pull_request:
    branches: [main]

jobs:
  backend-build-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
          cache: "maven"

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Backend Build & Test
        run: |
          cd backend
          ./mvnw clean compile test
          ./mvnw package -DskipTests

      - name: Upload backend test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-test-results
          path: backend/target/surefire-reports/
          retention-days: 30

      - name: Upload backend artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-artifacts
          path: backend/target/*.jar
          retention-days: 30

  frontend-build-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: frontend1/package-lock.json

      - name: Frontend Build & Test
        run: |
          cd frontend1
          npm ci --cache ~/.npm --prefer-offline
          npm test -- --watch=false --browsers=ChromeHeadless
          npm run build

      - name: Upload frontend artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-artifacts
          path: frontend1/dist/
          retention-days: 30

  e2e-testing:
    runs-on: ubuntu-latest
    needs: [backend-build-test, frontend-build-test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: frontend1/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend1
          npm ci

      - name: Install Playwright Browsers
        run: |
          cd frontend1
          npx playwright install --with-deps

      - name: Build Frontend
        run: |
          cd frontend1
          npm run build

      - name: Start Frontend Server
        run: |
          cd frontend1
          npx serve -l 4200 dist/frontend1/browser &
          npx wait-on http://localhost:4200

      - name: Run E2E Tests
        run: |
          cd frontend1
          # Check if server is running
          curl -f http://localhost:4200 || echo "Server not ready, waiting..."
          sleep 5
          curl -f http://localhost:4200 || echo "Server still not ready"

          # Run smoke tests with detailed output and 4 workers
          npx playwright test e2e/tests/smoke.spec.ts --reporter=list --timeout=60000 --workers=4

          # Run regression tests (non-blocking) with 4 workers
          npx playwright test e2e/tests/regression-*.spec.ts --reporter=list --timeout=60000 --workers=4 || true

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: |
            frontend1/playwright-report/
            frontend1/test-results/
          retention-days: 30

  integration-tests:
    runs-on: ubuntu-latest
    needs: [backend-build-test, frontend-build-test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Set up Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: frontend1/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend1
          npm ci

      - name: Install Playwright Browsers
        run: |
          cd frontend1
          npx playwright install --with-deps

      - name: Build Frontend
        run: |
          cd frontend1
          npm run build

      - name: Start Frontend Server
        run: |
          cd frontend1
          npx serve -l 4200 dist &
          npx wait-on http://localhost:4200

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Start MySQL Container
        run: |
          docker run -d --name test-mysql \
            -e MYSQL_ROOT_PASSWORD=root \
            -e MYSQL_DATABASE=flightbooking \
            -p 3306:3306 \
            mysql:8.0

          # Wait for MySQL to be ready
          sleep 30

      - name: Run Integration Tests
        run: |
          # Start backend service
          cd backend
          ./mvnw spring-boot:run -Dspring-boot.run.profiles=test &
          sleep 30

          # Run integration tests with 4 workers
          cd ../frontend1
          npx playwright test e2e/tests/smoke.spec.ts --reporter=list --workers=4

      - name: Cleanup containers
        if: always()
        run: |
          docker stop test-mysql || true
          docker rm test-mysql || true

  deploy-backend:
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.ref == 'refs/heads/jenkins-integration'

    steps:
      - name: Deploy to Railway
        run: |
          if [ -n "${{ secrets.RAILWAY_TOKEN }}" ]; then
            echo "Deploying to Railway..."
            curl -X POST \
              -H "Authorization: Bearer ${{ secrets.RAILWAY_TOKEN }}" \
              -H "Content-Type: application/json" \
              https://api.railway.app/v2/service/flight-booking-backend/deploy
          else
            echo "Skipping Railway deployment - no token configured"
          fi

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.ref == 'refs/heads/jenkins-integration'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          cd frontend1
          docker build -t flight-frontend .
          docker tag flight-frontend ${{ secrets.DOCKER_USERNAME }}/flight-frontend:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/flight-frontend:latest
