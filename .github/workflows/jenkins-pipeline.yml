name: Jenkins Pipeline (Self-Hosted Simulation)

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  jenkins-pipeline:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
          cache: "maven"

      - name: Set up Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: frontend1/package-lock.json

      - name: Download Jenkinsfile Runner
        run: |
          # Clean up any existing files
          rm -rf bin lib repo jenkinsfile-runner-1.0-beta-32.zip jenkins.war plugins.txt

          # Download Jenkinsfile Runner
          wget https://github.com/jenkinsci/jenkinsfile-runner/releases/download/1.0-beta-32/jenkinsfile-runner-1.0-beta-32.zip
          unzip -o jenkinsfile-runner-1.0-beta-32.zip

          # Download required Jenkins files
          wget https://github.com/jenkinsci/jenkins/releases/download/jenkins-2.375.1/jenkins.war

          # Create minimal plugins.txt
          echo "pipeline:latest" > plugins.txt
          echo "git:latest" >> plugins.txt
          echo "workflow-aggregator:latest" >> plugins.txt
          echo "junit:latest" >> plugins.txt
          echo "htmlpublisher:latest" >> plugins.txt

          ls -la

      - name: Run Jenkins Pipeline
        run: |
          # Build classpath with all required JAR files
          echo "Building classpath..."
          CLASSPATH="lib/setup/setup.jar:lib/payload/payload.jar"

          # Check if picocli JAR exists
          echo "Checking for picocli JAR..."
          ls -la repo/info/picocli/picocli/4.7.1/ || echo "picocli directory not found"

          # Add all JAR files from repo directory
          for jar in $(find repo -name "*.jar"); do
            CLASSPATH="$CLASSPATH:$jar"
            echo "Added to classpath: $jar"
          done

          echo "Final classpath: $CLASSPATH"

          # Verify picocli is in classpath
          echo "$CLASSPATH" | tr ':' '\n' | grep picocli || echo "picocli not found in classpath"

          # Run with correct options based on help output
          java -cp "$CLASSPATH" \
            io.jenkins.jenkinsfile.runner.bootstrap.Bootstrap \
            --w jenkins.war \
            --runHome . \
            --file Jenkinsfile \
            run
        env:
          # Set environment variables for the pipeline
          JAVA_HOME: /usr/lib/jvm/temurin-17-jdk-amd64
          NODE_HOME: /usr/local/bin/node
          GIT_BRANCH: ${{ github.ref_name }}
          GIT_COMMIT: ${{ github.sha }}

      - name: Upload Pipeline Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: jenkins-pipeline-artifacts
          path: |
            backend/target/surefire-reports/
            frontend1/dist/
            frontend1/playwright-report/
            frontend1/test-results/
          retention-days: 30
