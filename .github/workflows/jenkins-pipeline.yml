name: Jenkins Pipeline (Self-Hosted Simulation)

on:
  push:
    branches: [ main ]
    paths:
      - 'Jenkinsfile'
      - '.github/workflows/jenkins-pipeline.yml'
      - 'frontend1/**'
      - 'backend/**'
      - '!**/*.md'
  pull_request:
    branches: [ main ]
    paths:
      - 'Jenkinsfile'
      - '.github/workflows/jenkins-pipeline.yml'
      - 'frontend1/**'
      - 'backend/**'
      - '!**/*.md'

jobs:
  jenkins-pipeline:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'
          
      - name: Set up Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend1/package-lock.json
          
      - name: Stage 1: Checkout (Jenkins Simulation)
        run: |
          echo "=== Jenkins Pipeline Stage: Checkout ==="
          echo "Building commit: ${{ github.sha }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Workspace: $(pwd)"
          
      - name: Stage 2: Backend Build & Test (Jenkins Simulation)
        run: |
          echo "=== Jenkins Pipeline Stage: Backend Build & Test ==="
          cd backend
          
          # Clean and install dependencies
          echo "Running: ./mvnw clean install -DskipTests"
          ./mvnw clean install -DskipTests
          
          # Run unit tests
          echo "Running: ./mvnw test"
          ./mvnw test
          
          # Run integration tests
          echo "Running: ./mvnw verify -Dspring.profiles.active=test"
          ./mvnw verify -Dspring.profiles.active=test
          
          # Archive test results (Jenkins simulation)
          echo "Archiving test results..."
          mkdir -p ../jenkins-artifacts/backend
          cp -r target/surefire-reports ../jenkins-artifacts/backend/ || echo "No test reports found"
          
      - name: Stage 3: Frontend Build & Test (Jenkins Simulation)
        run: |
          echo "=== Jenkins Pipeline Stage: Frontend Build & Test ==="
          cd frontend1
          
          # Install dependencies
          echo "Running: npm ci --cache ~/.npm --prefer-offline"
          npm ci --cache ~/.npm --prefer-offline
          
          # Run unit tests
          echo "Running: npm test -- --watch=false --browsers=ChromeHeadless"
          npm test -- --watch=false --browsers=ChromeHeadless
          
          # Build production bundle
          echo "Running: npm run build"
          npm run build
          
          # Debug: Check what was built
          echo "Checking build output..."
          ls -la dist/ || echo "No dist folder"
          ls -la dist/frontend1/ || echo "No dist/frontend1 folder"
          
          # Archive build artifacts (Jenkins simulation)
          echo "Archiving build artifacts..."
          mkdir -p ../jenkins-artifacts/frontend
          cp -r dist ../jenkins-artifacts/frontend/ || echo "No dist folder found"
          
      - name: Stage 4: E2E Smoke Tests (Jenkins Simulation)
        run: |
          echo "=== Jenkins Pipeline Stage: E2E Smoke Tests ==="
          cd frontend1
          
          # Install Playwright browsers
          echo "Installing Playwright browsers..."
          npx playwright install --with-deps chromium
          
          # Ensure build exists and check structure
          if [ ! -d "dist" ]; then
            echo "Build not found, rebuilding..."
            npm run build
          fi
          
          # Debug: Show build structure
          echo "Build structure:"
          find dist -type d 2>/dev/null | head -10 || echo "No dist directory"
          
          # Find the correct build directory and create symlink if needed
          if [ -d "dist/frontend1/browser" ]; then
            echo "Found Angular 17+ build structure"
            # Create a symlink for easier serving
            ln -sf dist/frontend1/browser dist/frontend1 2>/dev/null || echo "Symlink creation failed"
          elif [ -d "dist/frontend1" ]; then
            echo "Found standard Angular build structure"
          else
            echo "ERROR: No recognized build directory found!"
            ls -la dist/ || echo "No dist directory"
            exit 1
          fi
          
          # Set environment variables for Playwright
          export CI=true
          export SMOKE_TESTS_ONLY=true
          export PLAYWRIGHT_BROWSERS_PATH=~/.cache/ms-playwright
          
          # Run smoke tests - Playwright will handle server startup
          echo "Running smoke tests with Playwright managing the server..."
          npx playwright test e2e/tests/smoke.spec.ts \
            --reporter=list \
            --timeout=30000 \
            --workers=1 \
            --project=chromium \
            --retries=2 \
            --max-failures=5
          
          # Archive E2E test results (Jenkins simulation)
          echo "Archiving E2E test results..."
          mkdir -p ../jenkins-artifacts/e2e
          cp -r playwright-report ../jenkins-artifacts/e2e/ 2>/dev/null || echo "No playwright report found"
          cp -r test-results ../jenkins-artifacts/e2e/ 2>/dev/null || echo "No test results found"
          
      - name: Stage 5: Deploy Backend (Railway) - Skipped
        run: |
          echo "=== Jenkins Pipeline Stage: Deploy Backend (Railway) ==="
          echo "Railway deployment skipped - token not configured"
          echo "When Railway token is available, uncomment deployment code in Jenkinsfile"
          
      - name: Stage 6: Deploy Frontend (Railway) - Skipped
        run: |
          echo "=== Jenkins Pipeline Stage: Deploy Frontend (Railway) ==="
          echo "Railway deployment skipped - token not configured"
          echo "When Railway token is available, uncomment deployment code in Jenkinsfile"
          
      - name: Upload Jenkins Pipeline Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: jenkins-pipeline-artifacts
          path: |
            jenkins-artifacts/
          retention-days: 30
          
      - name: Pipeline Success Notification
        if: success()
        run: |
          echo "=== Jenkins Pipeline Completed Successfully! üéâ ==="
          echo "All stages passed:"
          echo "‚úÖ Checkout"
          echo "‚úÖ Backend Build & Test"
          echo "‚úÖ Frontend Build & Test"
          echo "‚úÖ E2E Smoke Tests"
          echo "‚è≠Ô∏è  Deploy Backend (Skipped - no Railway token)"
          echo "‚è≠Ô∏è  Deploy Frontend (Skipped - no Railway token)"
          
      - name: Pipeline Failure Notification
        if: failure()
        run: |
          echo "=== Jenkins Pipeline Failed! ‚ùå ==="
          echo "Check the logs above for details on which stage failed."